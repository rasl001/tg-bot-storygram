from aiogram import Dispatcher, types, Bot
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
import sqlite3
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class AdminStates(StatesGroup):
    edit_welcome = State()
    edit_info = State()
    edit_rules = State()
    block_user = State()
    set_delay = State()

def get_admin_menu():
    buttons = [
        [KeyboardButton(text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ"), KeyboardButton(text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é")],
        [KeyboardButton(text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞"), KeyboardButton(text="–ë–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")],
        [KeyboardButton(text="–°–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö"), KeyboardButton(text="–ú–æ–¥–µ—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–æ–≤")],
        [KeyboardButton(text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏"), KeyboardButton(text="–ó–∞–¥–µ—Ä–∂–∫–∞ –ø–æ—Å—Ç–æ–≤")],
        [KeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç"), KeyboardButton(text="–ù–∞–∑–∞–¥")]
    ]
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

def setup_handlers(dp: Dispatcher, conn: sqlite3.Connection, bot: Bot):
    @dp.message(lambda message: message.text == "–ê–¥–º–∏–Ω–∫–∞")
    async def admin_menu(message: types.Message):
        c = conn.cursor()
        c.execute("SELECT is_admin FROM users WHERE user_id = ?", (message.from_user.id,))
        result = c.fetchone()
        if not result or not result[0]:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω–∫–µ!")
            return
        await message.answer("–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=get_admin_menu())

    @dp.message(lambda message: message.text == "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ")
    async def edit_welcome(message: types.Message, state: FSMContext):
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:")
        await state.set_state(AdminStates.edit_welcome)

    @dp.message(AdminStates.edit_welcome)
    async def process_welcome(message: types.Message, state: FSMContext):
        c = conn.cursor()
        c.execute("UPDATE settings SET value = ? WHERE key = 'welcome_message'", (message.text,))
        conn.commit()
        await message.answer("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!", reply_markup=get_admin_menu())
        await state.clear()

    @dp.message(lambda message: message.text == "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é")
    async def edit_info(message: types.Message, state: FSMContext):
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:")
        await state.set_state(AdminStates.edit_info)

    @dp.message(AdminStates.edit_info)
    async def process_info(message: types.Message, state: FSMContext):
        c = conn.cursor()
        c.execute("UPDATE settings SET value = ? WHERE key = 'info'", (message.text,))
        conn.commit()
        await message.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞!", reply_markup=get_admin_menu())
        await state.clear()

    @dp.message(lambda message: message.text == "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞")
    async def edit_rules(message: types.Message, state: FSMContext):
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –ø—Ä–∞–≤–∏–ª:")
        await state.set_state(AdminStates.edit_rules)

    @dp.message(AdminStates.edit_rules)
    async def process_rules(message: types.Message, state: FSMContext):
        c = conn.cursor()
        c.execute("UPDATE settings SET value = ? WHERE key = 'rules'", (message.text,))
        conn.commit()
        await message.answer("–ü—Ä–∞–≤–∏–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!", reply_markup=get_admin_menu())
        await state.clear()

    @dp.message(lambda message: message.text == "–ë–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    async def block_user(message: types.Message, state: FSMContext):
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å @):")
        await state.set_state(AdminStates.block_user)

    @dp.message(AdminStates.block_user)
    async def process_block(message: types.Message, state: FSMContext):
        username = message.text.lstrip("@")
        c = conn.cursor()
        c.execute("UPDATE users SET is_blocked = 1 WHERE username = ?", (username,))
        if c.rowcount == 0:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        else:
            c.execute("SELECT user_id FROM users WHERE username = ?", (username,))
            user_id = c.fetchone()[0]
            await bot.send_message(user_id, "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è StoryGram –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∞ –≤–∞—Å.")
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!", reply_markup=get_admin_menu())
        conn.commit()
        await state.clear()

    @dp.message(lambda message: message.text == "–°–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö")
    async def blocked_list(message: types.Message):
        c = conn.cursor()
        c.execute("SELECT username FROM users WHERE is_blocked = 1")
        blocked = c.fetchall()

        if not blocked:
            await message.answer("–ù–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", reply_markup=get_admin_menu())
            return

        text = "–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n" + "\n".join([f"@{u[0]}" for u in blocked])
        buttons = [[KeyboardButton(text=f"–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å @{u[0]}") for u in blocked[:2]],
                   [KeyboardButton(text="–ù–∞–∑–∞–¥")]]
        keyboard = ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)
        await message.answer(text, reply_markup=keyboard)

    @dp.message(lambda message: message.text and message.text.startswith("–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å @"))
    async def unblock_user(message: types.Message):
        username = message.text.split("@")[1]
        c = conn.cursor()
        c.execute("SELECT user_id FROM users WHERE username = ?", (username,))
        user = c.fetchone()
        if user:
            user_id = user[0]
            c.execute("UPDATE users SET is_blocked = 0 WHERE username = ?", (username,))
            conn.commit()
            await bot.send_message(user_id, "–í—ã –±—ã–ª–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π StoryGram!")
            await message.answer(f"@{username} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!", reply_markup=get_admin_menu())
        else:
            await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=get_admin_menu())

    @dp.message(lambda message: message.text == "–ú–æ–¥–µ—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–æ–≤")
    async def moderate_posts(message: types.Message):
        c = conn.cursor()
        c.execute("SELECT post_id, title, content, image_id, username FROM posts p "
                  "JOIN users u ON p.user_id = u.user_id WHERE status = 'pending' ORDER BY created_at ASC LIMIT 5")
        posts = c.fetchall()

        if not posts:
            await message.answer("–ù–µ—Ç –ø–æ—Å—Ç–æ–≤ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏", reply_markup=get_admin_menu())
            return

        for post_id, title, content, image_id, username in posts:
            short_content = content[:100] + "..." if len(content) > 100 else content
            text = f"üìù {title}\n{short_content}\n–ê–≤—Ç–æ—Ä: @{username}"

            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text=f"–û–¥–æ–±—Ä–∏—Ç—å: {title[:15]}..." if len(title) > 15 else f"–û–¥–æ–±—Ä–∏—Ç—å: {title}",
                                      callback_data=f"approve_{post_id}"),
                 InlineKeyboardButton(text=f"–í–µ—Ä–Ω—É—Ç—å: {title[:15]}..." if len(title) > 15 else f"–í–µ—Ä–Ω—É—Ç—å: {title}",
                                      callback_data=f"return_{post_id}")]
            ])

            if image_id:
                await bot.send_photo(message.chat.id, photo=image_id, caption=text, reply_markup=keyboard)
            else:
                await message.answer(text, reply_markup=keyboard)

    @dp.callback_query(lambda c: c.data.startswith("approve_"))
    async def approve_post(callback: types.CallbackQuery):
        post_id = int(callback.data.split("_")[1])
        c = conn.cursor()
        c.execute("SELECT user_id, title FROM posts WHERE post_id = ?", (post_id,))
        user_id, title = c.fetchone()
        c.execute("UPDATE posts SET status = 'approved' WHERE post_id = ?", (post_id,))
        c.execute("UPDATE users SET posts_count = posts_count + 1 WHERE user_id = ?", (user_id,))
        conn.commit()

        await bot.send_message(user_id, f"–ò—Å—Ç–æ—Ä–∏—è '{title}' –ø—Ä–æ—à–ª–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ ‚úÖ")
        if callback.message.photo:
            await callback.message.edit_caption(caption=callback.message.caption + "\n‚úÖ –ü–æ—Å—Ç –æ–¥–æ–±—Ä–µ–Ω!",
                                                reply_markup=None)
        else:
            await callback.message.edit_text(callback.message.text + "\n‚úÖ –ü–æ—Å—Ç –æ–¥–æ–±—Ä–µ–Ω!", reply_markup=None)
        await callback.answer("–ü–æ—Å—Ç –æ–¥–æ–±—Ä–µ–Ω!")

    @dp.callback_query(lambda c: c.data.startswith("return_"))
    async def return_post(callback: types.CallbackQuery):
        post_id = int(callback.data.split("_")[1])
        c = conn.cursor()
        c.execute("SELECT user_id, title FROM posts WHERE post_id = ?", (post_id,))
        user_id, title = c.fetchone()
        c.execute("UPDATE posts SET status = 'returned' WHERE post_id = ?", (post_id,))
        conn.commit()

        await bot.send_message(user_id, f"–ò—Å—Ç–æ—Ä–∏—è '{title}' –Ω–µ –ø—Ä–æ—à–ª–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é –∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞ –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É ‚ùå")
        if callback.message.photo:
            await callback.message.edit_caption(caption=callback.message.caption + "\n‚Ü©Ô∏è –ü–æ—Å—Ç –≤–æ–∑–≤—Ä–∞—â—ë–Ω –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É!",
                                                reply_markup=None)
        else:
            await callback.message.edit_text(callback.message.text + "\n‚Ü©Ô∏è –ü–æ—Å—Ç –≤–æ–∑–≤—Ä–∞—â—ë–Ω –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É!",
                                             reply_markup=None)
        await callback.answer("–ü–æ—Å—Ç –≤–æ–∑–≤—Ä–∞—â—ë–Ω –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É!")

    @dp.message(lambda message: message.text == "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏")
    async def moderation_settings(message: types.Message):
        c = conn.cursor()
        c.execute("SELECT value FROM settings WHERE key = 'moderation_enabled'")
        current = c.fetchone()[0]
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="–í–∫–ª—é—á–∏—Ç—å –º–æ–¥–µ—Ä–∞—Ü–∏—é"), KeyboardButton(text="–í—ã–∫–ª—é—á–∏—Ç—å –º–æ–¥–µ—Ä–∞—Ü–∏—é")],
                [KeyboardButton(text="–ù–∞–∑–∞–¥")]
            ],
            resize_keyboard=True
        )
        await message.answer(f"–ú–æ–¥–µ—Ä–∞—Ü–∏—è —Å–µ–π—á–∞—Å: {'–≤–∫–ª—é—á–µ–Ω–∞' if current == '1' else '–≤—ã–∫–ª—é—á–µ–Ω–∞'}",
                             reply_markup=keyboard)

    @dp.message(lambda message: message.text in ["–í–∫–ª—é—á–∏—Ç—å –º–æ–¥–µ—Ä–∞—Ü–∏—é", "–í—ã–∫–ª—é—á–∏—Ç—å –º–æ–¥–µ—Ä–∞—Ü–∏—é"])
    async def toggle_moderation(message: types.Message):
        c = conn.cursor()
        value = '1' if message.text == "–í–∫–ª—é—á–∏—Ç—å –º–æ–¥–µ—Ä–∞—Ü–∏—é" else '0'
        c.execute("UPDATE settings SET value = ? WHERE key = 'moderation_enabled'", (value,))
        conn.commit()
        await message.answer(f"–ú–æ–¥–µ—Ä–∞—Ü–∏—è {'–≤–∫–ª—é—á–µ–Ω–∞' if value == '1' else '–≤—ã–∫–ª—é—á–µ–Ω–∞'}!",
                             reply_markup=get_admin_menu())

    @dp.message(lambda message: message.text == "–ó–∞–¥–µ—Ä–∂–∫–∞ –ø–æ—Å—Ç–æ–≤")
    async def set_delay(message: types.Message, state: FSMContext):
        c = conn.cursor()
        c.execute("SELECT value FROM settings WHERE key = 'post_delay'")
        current = c.fetchone()[0]
        await message.answer(f"–¢–µ–∫—É—â–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞: {current} –º–∏–Ω—É—Ç\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–≤ –º–∏–Ω—É—Ç–∞—Ö):")
        await state.set_state(AdminStates.set_delay)

    @dp.message(AdminStates.set_delay)
    async def process_delay(message: types.Message, state: FSMContext):
        try:
            delay = int(message.text)
            if delay < 1:
                raise ValueError
            c = conn.cursor()
            c.execute("UPDATE settings SET value = ? WHERE key = 'post_delay'", (delay,))
            conn.commit()
            await message.answer(f"–ó–∞–¥–µ—Ä–∂–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {delay} –º–∏–Ω—É—Ç", reply_markup=get_admin_menu())
            await state.clear()
        except ValueError:
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ!")

    @dp.message(lambda message: message.text == "–£–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç")
    async def delete_post_menu(message: types.Message):
        c = conn.cursor()
        c.execute("SELECT post_id, title, username FROM posts p JOIN users u ON p.user_id = u.user_id "
                  "WHERE status = 'approved' ORDER BY created_at DESC LIMIT 5")
        posts = c.fetchall()
        if not posts:
            await message.answer("–ù–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", reply_markup=get_admin_menu())
            return
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=f"{title} (@{username})", callback_data=f"admin_delete_{post_id}")]
            for post_id, title, username in posts
        ])
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Å—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=keyboard)

    @dp.callback_query(lambda c: c.data.startswith("admin_delete_"))
    async def delete_post(callback: types.CallbackQuery):
        try:
            post_id = int(callback.data.split("_")[2])
            c = conn.cursor()
            c.execute("SELECT title, user_id FROM posts WHERE post_id = ?", (post_id,))
            post = c.fetchone()
            if post:
                title, user_id = post
                c.execute("DELETE FROM posts WHERE post_id = ?", (post_id,))
                conn.commit()
                await bot.send_message(user_id, f"–ò—Å—Ç–æ—Ä–∏—è '{title}' —É–¥–∞–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π.")
                await callback.message.edit_text(f"–ü–æ—Å—Ç '{title}' —É–¥–∞–ª—ë–Ω.", reply_markup=None)
                await callback.answer("–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
            else:
                await callback.answer("–ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        except (IndexError, ValueError) as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ delete_post: {e}")
            await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞.")